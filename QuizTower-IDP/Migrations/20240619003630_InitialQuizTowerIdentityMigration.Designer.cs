// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizTower.IDP.DbContexts;

#nullable disable

namespace QuizTower.IDP.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240619003630_InitialQuizTowerIdentityMigration")]
    partial class InitialQuizTowerIdentityMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizTower.IDP.Entities.AspNetUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnOrder(0);

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SecurityCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("SecurityCodeExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Subject")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Active = true,
                            ConcurrencyStamp = "71c8d265-9eac-4fcf-be1f-c6b7ecd655ac",
                            Email = "david@someprovider.com",
                            Password = "AQAAAAIAAYagAAAAEAFfhxfb2YqaRx4WePWJMkIE/tmk/oY7csVwmRqu63+TjAVYgulpGORreroxJD1AdA==",
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "d860efca-22d9-47fd-8249-791ba61b07c7",
                            UserName = "David"
                        },
                        new
                        {
                            Id = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Active = true,
                            ConcurrencyStamp = "8315eadb-caa7-452d-8c46-bd15d1791c7b",
                            Email = "emma@someprovider.com",
                            Password = "AQAAAAIAAYagAAAAEAFfhxfb2YqaRx4WePWJMkIE/tmk/oY7csVwmRqu63+TjAVYgulpGORreroxJD1AdA==",
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "b7539694-97e7-4dfe-84da-b4256e1ff5c7",
                            UserName = "Emma"
                        },
                        new
                        {
                            Id = new Guid("a120fd96-1dea-4922-8403-289e5f2dbb6a"),
                            Active = true,
                            ConcurrencyStamp = "2149b3ed-d54d-47a7-afb1-8cde7e7a075a",
                            Email = "admin@admin.com",
                            Password = "AQAAAAIAAYagAAAAEAFfhxfb2YqaRx4WePWJMkIE/tmk/oY7csVwmRqu63+TjAVYgulpGORreroxJD1AdA==",
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "B8C91EF2-7C41-4561-A323-A73B8F25F686",
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("QuizTower.IDP.Entities.AspNetUserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnOrder(0);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43613a6e-f767-4ca2-994f-b953dcbf5006"),
                            ConcurrencyStamp = "4fd60a1c-0275-4e55-8478-f3ea020a04ab",
                            Type = "given_name",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "David"
                        },
                        new
                        {
                            Id = new Guid("a489adef-e696-4ea8-afe9-0f60a6a2b70c"),
                            ConcurrencyStamp = "445c1570-db9c-4ef1-a429-f2e7fb924786",
                            Type = "family_name",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "Flagg"
                        },
                        new
                        {
                            Id = new Guid("f6f9a848-6ae4-483e-b4c5-d3c56c5d5bf8"),
                            ConcurrencyStamp = "7e96ebba-e9cc-42ea-ba09-32ab249ac874",
                            Type = "country",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "nl"
                        },
                        new
                        {
                            Id = new Guid("ab35d664-e2be-4e2e-8c0b-6a79845c0126"),
                            ConcurrencyStamp = "ac4fed47-925e-4a15-a023-c68c11512dfb",
                            Type = "role",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "FreeUser"
                        },
                        new
                        {
                            Id = new Guid("e7e73b50-a546-4dd7-98a6-f04aeae04c3a"),
                            ConcurrencyStamp = "7d2ef7a7-ec2f-40fb-8ab1-cd0c40ad53f5",
                            Type = "role",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "Player"
                        },
                        new
                        {
                            Id = new Guid("fb79ff32-d67c-4424-b358-dabc38a46922"),
                            ConcurrencyStamp = "7309b04d-936b-4b51-ae9d-f2a6ba1c825d",
                            Type = "given_name",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "Emma"
                        },
                        new
                        {
                            Id = new Guid("47b1d199-e57b-4cbe-b1e2-8d824e043c4d"),
                            ConcurrencyStamp = "526a990e-debf-4de9-9143-869b6751e3b1",
                            Type = "family_name",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "Flagg"
                        },
                        new
                        {
                            Id = new Guid("fd50dee5-cddd-4d6c-b3b4-533eb2c4ceb9"),
                            ConcurrencyStamp = "e26a54a3-a580-444f-b41e-fd6fa7e4b090",
                            Type = "country",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "be"
                        },
                        new
                        {
                            Id = new Guid("a536485b-56ad-41b4-aaa5-1310d2e9b59d"),
                            ConcurrencyStamp = "1b135caa-3f69-4232-9509-a6abed81bbc3",
                            Type = "role",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "PayingUser"
                        },
                        new
                        {
                            Id = new Guid("9b8b95bd-2353-4acf-9d9a-3d0f62adde2f"),
                            ConcurrencyStamp = "63027ba2-c9d8-4c21-8439-9f5edcf0915c",
                            Type = "role",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "QuizMaster"
                        },
                        new
                        {
                            Id = new Guid("72eb129c-d954-4211-8b94-e3d594705499"),
                            ConcurrencyStamp = "3d0f46ef-289c-4472-b570-b2a343b18a38",
                            Type = "given_name",
                            UserId = new Guid("a120fd96-1dea-4922-8403-289e5f2dbb6a"),
                            Value = "Admin"
                        },
                        new
                        {
                            Id = new Guid("7a59a12a-aaed-4799-862a-fddd4fb4f521"),
                            ConcurrencyStamp = "69e21ea4-d751-4273-9e51-94fe4a5f95f6",
                            Type = "family_name",
                            UserId = new Guid("a120fd96-1dea-4922-8403-289e5f2dbb6a"),
                            Value = "Flagg"
                        },
                        new
                        {
                            Id = new Guid("b25df510-2891-4895-94ba-019995de222c"),
                            ConcurrencyStamp = "742cb02a-4e9c-4545-a438-fa906284edf0",
                            Type = "country",
                            UserId = new Guid("a120fd96-1dea-4922-8403-289e5f2dbb6a"),
                            Value = "nl"
                        },
                        new
                        {
                            Id = new Guid("913474cd-d936-4f9d-8431-2aaca8a95dff"),
                            ConcurrencyStamp = "43d5b0c9-54d6-45ac-a270-c0cc466876a2",
                            Type = "role",
                            UserId = new Guid("a120fd96-1dea-4922-8403-289e5f2dbb6a"),
                            Value = "Owner"
                        },
                        new
                        {
                            Id = new Guid("bd7a3177-49f5-464f-b399-b1958e85463d"),
                            ConcurrencyStamp = "2e8e47f6-561c-450a-b139-ed268ce85f77",
                            Type = "role",
                            UserId = new Guid("a120fd96-1dea-4922-8403-289e5f2dbb6a"),
                            Value = "SecurityAdmin"
                        });
                });

            modelBuilder.Entity("QuizTower.IDP.Entities.AspNetUserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnOrder(0);

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProviderIdentityKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "Identity");
                });

            modelBuilder.Entity("QuizTower.IDP.Entities.AspNetUserSecret", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnOrder(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserSecrets", "Identity");
                });

            modelBuilder.Entity("QuizTower.IDP.Entities.AspNetUserClaim", b =>
                {
                    b.HasOne("QuizTower.IDP.Entities.AspNetUser", "AspNetUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AspNetUser");
                });

            modelBuilder.Entity("QuizTower.IDP.Entities.AspNetUserLogin", b =>
                {
                    b.HasOne("QuizTower.IDP.Entities.AspNetUser", "AspNetUser")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AspNetUser");
                });

            modelBuilder.Entity("QuizTower.IDP.Entities.AspNetUserSecret", b =>
                {
                    b.HasOne("QuizTower.IDP.Entities.AspNetUser", "AspNetUser")
                        .WithMany("Secrets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AspNetUser");
                });

            modelBuilder.Entity("QuizTower.IDP.Entities.AspNetUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Secrets");
                });
#pragma warning restore 612, 618
        }
    }
}
