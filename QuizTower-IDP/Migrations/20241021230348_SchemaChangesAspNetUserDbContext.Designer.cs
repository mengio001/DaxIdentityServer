// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizTower.IDP.DbContexts;

#nullable disable

namespace QuizTower.IDP.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241021230348_SchemaChangesAspNetUserDbContext")]
    partial class SchemaChangesAspNetUserDbContext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizTower.IDP.Entities.AspNetUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnOrder(0);

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("SecurityCodeExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Subject")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "39c674aa-13d6-4bb4-a9b5-31eaafa722b1",
                            Email = "david@someprovider.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAFfhxfb2YqaRx4WePWJMkIE/tmk/oY7csVwmRqu63+TjAVYgulpGORreroxJD1AdA==",
                            PhoneNumberConfirmed = false,
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "d860efca-22d9-47fd-8249-791ba61b07c7",
                            TwoFactorEnabled = false,
                            UserName = "David"
                        },
                        new
                        {
                            Id = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "5a5a89fa-8249-4b91-820a-f4fa5a7e6c46",
                            Email = "emma@someprovider.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAFfhxfb2YqaRx4WePWJMkIE/tmk/oY7csVwmRqu63+TjAVYgulpGORreroxJD1AdA==",
                            PhoneNumberConfirmed = false,
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "b7539694-97e7-4dfe-84da-b4256e1ff5c7",
                            TwoFactorEnabled = false,
                            UserName = "Emma"
                        },
                        new
                        {
                            Id = new Guid("a120fd96-1dea-4922-8403-289e5f2dbb6a"),
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "7815541c-f3e7-4e36-a4d6-b7d0ed46c677",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAFfhxfb2YqaRx4WePWJMkIE/tmk/oY7csVwmRqu63+TjAVYgulpGORreroxJD1AdA==",
                            PhoneNumberConfirmed = false,
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "B8C91EF2-7C41-4561-A323-A73B8F25F686",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("QuizTower.IDP.Entities.AspNetUserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnOrder(0);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f581618-9121-4f01-a7f7-47baa9ed370c"),
                            ConcurrencyStamp = "f568e20a-aae4-475c-8b79-08439d3a63ac",
                            Type = "given_name",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "David"
                        },
                        new
                        {
                            Id = new Guid("60d18746-a82c-4fe6-b4ce-8b53ea83b5a0"),
                            ConcurrencyStamp = "841935df-9f80-4698-8778-438cb335740c",
                            Type = "family_name",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "Flagg"
                        },
                        new
                        {
                            Id = new Guid("b87a91d8-a05c-4aee-98e9-c0d72bfe80e1"),
                            ConcurrencyStamp = "33476c74-69a3-4e0f-be6f-4e186417d39c",
                            Type = "country",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "nl"
                        },
                        new
                        {
                            Id = new Guid("8d204b0f-10de-49c6-bdf7-9717c67c0867"),
                            ConcurrencyStamp = "b4b3febd-0223-4563-b0ad-f3495cc1633b",
                            Type = "role",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "FreeUser"
                        },
                        new
                        {
                            Id = new Guid("7379c45e-527e-4261-a319-de2abfe0d1e0"),
                            ConcurrencyStamp = "075a9638-5d39-4fb7-877b-6d4fa564de15",
                            Type = "role",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "Player"
                        },
                        new
                        {
                            Id = new Guid("e7b19aa0-b210-45b1-a505-e2d4a8f7b1fd"),
                            ConcurrencyStamp = "3862d894-303e-44fb-9c03-249e4721d8ce",
                            Type = "given_name",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "Emma"
                        },
                        new
                        {
                            Id = new Guid("94a04b02-afc2-4a59-a6e1-25558bc80ffe"),
                            ConcurrencyStamp = "d795d5ea-c8c5-42cc-bf39-6a50af5dcb1d",
                            Type = "family_name",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "Flagg"
                        },
                        new
                        {
                            Id = new Guid("22e197f2-558d-4285-a82f-af36d174667c"),
                            ConcurrencyStamp = "d6cc9df8-1138-4746-b365-1bf53fdb5708",
                            Type = "country",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "be"
                        },
                        new
                        {
                            Id = new Guid("38c4d9ea-2752-4a0b-abe1-0bb3792f4f0b"),
                            ConcurrencyStamp = "0d5c9be8-1b18-43c7-8f40-319a16f4d6dc",
                            Type = "role",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "PayingUser"
                        },
                        new
                        {
                            Id = new Guid("fc1dd9dc-6d59-465e-bb73-8c628a113191"),
                            ConcurrencyStamp = "a6eb1744-03db-406e-a574-8232fc62026f",
                            Type = "role",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "QuizMaster"
                        },
                        new
                        {
                            Id = new Guid("f758e815-d385-42bc-ac61-f48beb0fc8cf"),
                            ConcurrencyStamp = "78613f40-31b0-4d62-87a7-49530e4fd4f9",
                            Type = "given_name",
                            UserId = new Guid("a120fd96-1dea-4922-8403-289e5f2dbb6a"),
                            Value = "Admin"
                        },
                        new
                        {
                            Id = new Guid("c0f363f3-96d7-44d6-89df-fe8341c9debd"),
                            ConcurrencyStamp = "661784e2-7a5c-4b00-b93d-0b8563a7fc0d",
                            Type = "family_name",
                            UserId = new Guid("a120fd96-1dea-4922-8403-289e5f2dbb6a"),
                            Value = "Flagg"
                        },
                        new
                        {
                            Id = new Guid("56d7e111-d635-4dc3-af91-086e2b48d6a9"),
                            ConcurrencyStamp = "4cf12f5a-1a92-4a32-b503-26a90966d668",
                            Type = "country",
                            UserId = new Guid("a120fd96-1dea-4922-8403-289e5f2dbb6a"),
                            Value = "nl"
                        },
                        new
                        {
                            Id = new Guid("28b2ac28-e84e-47df-b9f6-0337c1d1ce65"),
                            ConcurrencyStamp = "fe2ec61d-fc5f-44ca-a715-108c7d8240d3",
                            Type = "role",
                            UserId = new Guid("a120fd96-1dea-4922-8403-289e5f2dbb6a"),
                            Value = "Owner"
                        },
                        new
                        {
                            Id = new Guid("758abecd-ff2c-437b-960b-0ee50c04e63b"),
                            ConcurrencyStamp = "728f738f-2947-4b07-98b8-e6d72c6b4778",
                            Type = "role",
                            UserId = new Guid("a120fd96-1dea-4922-8403-289e5f2dbb6a"),
                            Value = "SecurityAdmin"
                        });
                });

            modelBuilder.Entity("QuizTower.IDP.Entities.AspNetUserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnOrder(0);

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProviderIdentityKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "Identity");
                });

            modelBuilder.Entity("QuizTower.IDP.Entities.AspNetUserSecret", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasColumnOrder(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserSecrets", "Identity");
                });

            modelBuilder.Entity("QuizTower.IDP.Entities.AspNetUserClaim", b =>
                {
                    b.HasOne("QuizTower.IDP.Entities.AspNetUser", "AspNetUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AspNetUser");
                });

            modelBuilder.Entity("QuizTower.IDP.Entities.AspNetUserLogin", b =>
                {
                    b.HasOne("QuizTower.IDP.Entities.AspNetUser", "AspNetUser")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AspNetUser");
                });

            modelBuilder.Entity("QuizTower.IDP.Entities.AspNetUserSecret", b =>
                {
                    b.HasOne("QuizTower.IDP.Entities.AspNetUser", "AspNetUser")
                        .WithMany("Secrets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AspNetUser");
                });

            modelBuilder.Entity("QuizTower.IDP.Entities.AspNetUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Secrets");
                });
#pragma warning restore 612, 618
        }
    }
}
